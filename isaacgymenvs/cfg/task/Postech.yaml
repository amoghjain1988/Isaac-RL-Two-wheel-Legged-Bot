# used to create the object
name: Postech

physics_engine: ${..physics_engine}

# if given, will override the device setting in gym. 
env:
  numEnvs: ${resolve_default:1024,${...num_envs}}
  envSpacing: 2.0
  resetDist: 10000
  maxEffort: 25
  enableDebugVis: False

  clipObservations: 5.0
  clipActions: 1

  terrain:
    terrainType: trimesh # none, plane, or trimesh
    staticFriction: 1.0  # [-]
    dynamicFriction: 1.0  # [-]
    restitution: 0.        # [-]
    # rough terrain only:
    curriculum: true
    maxInitMapLevel: 0
    mapLength: 6. # default 6.
    mapWidth: 6. # default 6.
    numLevels: 15 # default : 10
    numTerrains: 25 # default: 20
    difficulty_height: 36 # higher the slope decrease
    # terrain types: [smooth slope, rough slope, stairs up, stairs down, discrete]
    terrainProportions: [0.1, 0.1, 0.35, 0.25, 0.2]
    # tri mesh only:
    slopeTreshold: 0.5 # default: 0.5

  asset:
    assetRoot: "../../assets"
    assetFileName: "urdf/postech/urdf/postech.urdf"
    footName: wheel # SHANK if collapsing fixed joint, FOOT otherwise
    kneeName: hip # since the hip is upper part of leg
    baseName: base_link
    collapseFixedJoints: False
    fixBaseLink: False
    defaultDofDriveMode: 4 # see GymDofDriveModeFlags (0 is none, 1 is pos tgt, 2 is vel tgt, 4 effort)

  # viewer cam:
  viewer:
    refEnv: 0
    pos: [0, 0, 10]  # [m]
    lookat: [1., 1, 9]  # [m]

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False
  
  baseInitState:
    pos: [0.0, 0.0, 0.75] # x,y,z [m]
    rot: [0.0, 0.0, 0.0, 1.0] # x,y,z,w [quat]
    vLinear: [0.0, 0.0, 0.0]  # x,y,z [m/s]
    vAngular: [0.0, 0.0, 0.0]  # x,y,z [rad/s]

  randomCommandVelocityRanges:
    linear_x: [-0.05, 1.0]   # min max [m/s]
    linear_y: [-0., 0.]   # min max [m/s]
    yaw: [-0.5, 0.5]    # min max [rad/s]

  randomJointVelocityRanges:
    hip_l_range: [-0.0, 0.0]   # min max [m/s]
    knee_l_range: [-0.1, 0.1]   # min max [m/s]
    wheel_l_range: [-1.0, 1.0]   # min max [m/s]
    hip_r_range: [-0.0, 0.0]   # min max [m/s]
    knee_r_range: [-0.1, 0.1]  # min max [m/s]
    wheel_r_range: [-1.0, 1.0]   # min max [m/s]

  learn:
    #randomization
    randomizeFriction: true
    frictionRange: [0.5, 1.25]
    pushRobots: false
    pushInterval_s: 45 # default : 15
    # episode length in seconds
    episodeLength_s: 80 # default : 20
    episodeLength_m: 200
    heightMeasurementScale: 5.0
    allowKneeContacts: false

  defaultJointAngles:  # = target angles when action = 0.0
    hip_l_joint: 0.1    # [rad]
    knee_l_joint: 0.1    # [rad]
    wheel_l_joint: 0.1   # [rad]

    hip_r_joint: 0.1     # [rad]
    knee_r_joint: 0.1    # [rad]
    wheel_r_joint: 0.1     # [rad]

  control:
    # PD Drive parameters:
    stiffness: 80.0  # [N*m/rad]
    damping: 2.0     # [N*m*s/rad]
    # action scale: target angle = actionScale * action + defaultAngle
    actionScale: 0.5
    # decimation: Number of control action updates @ sim DT per policy DT
    decimation: 4

sim:
  dt: 0.0166 # 1/60 s
  substeps: 2
  up_axis: "z"
  up_axis_idx": 2
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 1
    contact_offset: 0.02
    rest_offset: 0.001
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 100.0
    default_buffer_size_multiplier: 2.0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 1 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)

task:
  randomize: false
  randomization_params:
    frequency: 720   # Define how many simulation steps between generating new randomizations
    observations:
      range: [0, .002] # range for the white noise
      range_correlated: [0, .001 ] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      # schedule: "linear"   # "constant" is to turn on noise after `schedule_steps` num steps
      # schedule_steps: 40000
    actions:
      range: [-0.05, 0.05]
      range_correlated: [0, .015] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      # schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
      # schedule_steps: 40000
    actor_params:
      postech:
        rigid_body_properties:
          mass: 
            range: [1, 1.5]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            # schedule: "linear"  # "
